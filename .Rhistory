library(shiny)
counterButton <- function(id, label = "Counter") {
ns <- NS(id)
tagList(
actionButton(ns("button"), label = label),
verbatimTextOutput(ns("out"))
)
}
counterServer <- function(id) {
moduleServer(
id,
function(input, output, session) {
count <- reactiveVal(0)
observeEvent(input$button, {
count(count() + 1)
})
output$out <- renderText({
count()
})
count
}
)
}
ui <- fluidPage(
counterButton("counter1", "Counter #1")
)
server <- function(input, output, session) {
counterServer("counter1")
}
shinyApp(ui, server)
library(shiny)
textBox <- function(id, label = "box") {
ns <- NS(id)
verbatimTextOutput("value")
}
counterServer <- function(id) {
moduleServer(
id,
function(input, output, session) {
output$value <- renderText({input$text})
}
)
}
ui <- fluidPage(
textInput("text", "Text")
)
server <- function(input, output, session) {
textServer("text")
}
shinyApp(ui, server)
library(shiny)
textBox <- function(id, label = "box") {
ns <- NS(id)
verbatimTextOutput("value")
}
textServer <- function(id) {
moduleServer(
id,
function(input, output, session) {
output$value <- renderText({input$text})
}
)
}
ui <- fluidPage(
textInput("text", "Text")
)
server <- function(input, output, session) {
textServer("text")
}
shinyApp(ui, server)
library(shiny)
textBox <- function(id, label = "box") {
ns <- NS(id)
textOutput("value")
}
textServer <- function(id) {
moduleServer(
id,
function(input, output, session) {
output$value <- renderText({input$txt})
}
)
}
ui <- fluidPage(
textInput("txt", "Text"),
textBox("text")
)
server <- function(input, output, session) {
textServer("text")
}
shinyApp(ui, server)
library(shiny)
textBox <- function(id, label = "box") {
ns <- NS(id)
textOutput("value")
}
textServer <- function(id) {
moduleServer(
id,
function(input, output, session) {
output$value <- renderText({input$txt})
}
)
}
ui <- fluidPage(
textInput("txt", "Text", "huh"),
textBox("text")
)
server <- function(input, output, session) {
textServer("text")
}
shinyApp(ui, server)
library(shiny)
textBox <- function(id, label = "box") {
ns <- NS(id)
tagList(
textInput(ns("txt"), "Text", "huh"),
textOutput(ns("value"))
)
}
textServer <- function(id) {
moduleServer(
id,
function(input, output, session) {
output$value <- renderText({input$txt})
}
)
}
ui <- fluidPage(
textBox("text")
)
server <- function(input, output, session) {
textServer("text")
}
shinyApp(ui, server)
library(shiny)
textBox <- function(id, label = "box") {
ns <- NS(id)
tagList(
textOutput(ns("value"))
)
}
textServer <- function(id) {
moduleServer(
id,
function(input, output, session) {
output$value <- renderText({input$txt})
}
)
}
ui <- fluidPage(
textBox("text")
)
server <- function(input, output, session) {
textInput(ns("txt"), "Text", "huh"),
textServer("text")
}
shinyApp(ui, server)
library(shiny)
textBox <- function(id, label = "box") {
ns <- NS(id)
tagList(
textOutput(ns("value"))
)
}
textServer <- function(id) {
moduleServer(
id,
function(input, output, session) {
output$value <- renderText({input$txt})
}
)
}
ui <- fluidPage(
textInput(ns("txt"), "Text", "huh"),
textBox("text")
)
server <- function(input, output, session) {
textServer("text")
}
shinyApp(ui, server)
library(shiny)
textBox <- function(id, label = "box") {
ns <- NS(id)
tagList(
textInput(ns("txt"), "Text", "huh"),
textOutput(ns("value"))
)
}
textServer <- function(id) {
moduleServer(
id,
function(input, output, session) {
output$value <- renderText({input$txt})
}
)
}
ui <- fluidPage(
textBox("text")
)
server <- function(input, output, session) {
textServer("text")
}
shinyApp(ui, server)
